import ij.IJ;
import ij.ImagePlus;
import ij.Macro;
import ij.macro.ExtensionDescriptor;
import ij.macro.Functions;
import ij.macro.MacroExtension;
import ij.plugin.PlugIn;

import javax.swing.JFrame;

import org.imagearchive.lsm.toolbox.BatchConverter;
import org.imagearchive.lsm.toolbox.DomXmlExporter;
import org.imagearchive.lsm.toolbox.MasterModel;
import org.imagearchive.lsm.toolbox.Reader;
import org.imagearchive.lsm.toolbox.ServiceMediator;
import org.imagearchive.lsm.toolbox.StampUtils;
import org.imagearchive.lsm.toolbox.gui.AboutDialog;
import org.imagearchive.lsm.toolbox.gui.ControlPanelFrame;

public class LSM_Toolbox implements PlugIn, MacroExtension {

	public MasterModel masterModel = MasterModel.getMasterModel();

	public final String infoMessage =
		"LSM_Toolbox4.0g Copyright (C) 2002-2010 P. Pirrotte, J. Mutterer\n\nThis software is subject to the GNU General Public License\nPlease read LICENSE or read source code information headers\nWorks on images generated by LSM 510 version 2.8 to 4.0\nContacts :\npatrick@image-archive.org and jerome.mutterer@ibmp-ulp.u-strasbg.fr\n";

	private final ExtensionDescriptor[] extensions = {
		ExtensionDescriptor.newDescriptor("lsmXML", this, 17),
		ExtensionDescriptor.newDescriptor("getTStamps", this, 17),
		ExtensionDescriptor.newDescriptor("getZStamps", this, 17),
		ExtensionDescriptor.newDescriptor("getLStamps", this, 17),
		ExtensionDescriptor.newDescriptor("getEvents", this, 17),
		ExtensionDescriptor.newDescriptor("lsmOpen", this, 1) };
	public ControlPanelFrame controlPanel;

	@Override
	public void run(final String args) {
		IJ.register(LSM_Toolbox.class);
		MasterModel.debugMode = IJ.debugMode;
		if (args.equals("about")) {
			new AboutDialog(new JFrame(), this.masterModel).setVisible(true);
			return;
		}
		if (IJ.versionLessThan("1.41a")) {
			return;
		}
		String fileName = "";
		final String macroOptions = Macro.getOptions();
		if ((IJ.macroRunning()) && (macroOptions.trim().equalsIgnoreCase("ext"))) {
			Functions.registerExtensions(this);
			return;
		}
		if (!args.equals("")) fileName = getMacroOption("file=", args);
		if ((macroOptions != null) && (!macroOptions.equals(""))) {
			fileName = getMacroOption("file=", macroOptions).trim();
		}
		if ((!fileName.equals("")) && (fileName.endsWith(".lsm"))) {
			final String fn = fileName;
			final Reader reader = ServiceMediator.getReader();
			try {
				IJ.showStatus("Loading image");
				final ImagePlus imp = reader.open(fn, true);
				IJ.showStatus("Image loaded");
				if (imp == null) return;
				imp.setPosition(1, 1, 1);
				imp.show();
			}
			catch (final OutOfMemoryError e) {
				IJ.outOfMemory("Could not load lsm image.");
			}
		}
		else if (fileName.endsWith(".csv")) {
			final BatchConverter converter = new BatchConverter(this.masterModel);
			converter.convertBatchFile(args);
		}
		else if (args.equals("")) {
			this.controlPanel = new ControlPanelFrame(this.masterModel);
			this.controlPanel.initializeGUI();
		}
	}

	public String getMacroOption(final String tag, final String options) {
		final int index = options.indexOf(tag);
		if (index == -1) return null;
		return options.substring(index + 5, options.length());
	}

	public static void open(final String args) {
		new LSM_Toolbox().run(args);
	}

	public static String getXML(final String filename, final boolean filter) {
		return new DomXmlExporter().getXML(filename, filter);
	}

	@Override
	public ExtensionDescriptor[] getExtensionFunctions() {
		return this.extensions;
	}

	@Override
	public String handleExtension(final String name, final Object[] args) {
		final Object o = args[0];
		if (name.equals("lsmXML")) {
			if (o == null) {
				return null;
			}
			final String[] a = (String[]) o;
			return new DomXmlExporter().getXML(a[0], false);
		}
		if (name.equals("lsmOpen")) {
			if (o == null) return null;
			final ImagePlus imp = ServiceMediator.getReader().open((String) o, false);
			if (imp == null) return null;
			imp.setPosition(1, 1, 1);
			imp.show();
			return null;
		}
		if (name.equals("getTStamps")) {
			if (o == null) return null;
			final String[] a = (String[]) o;
			final Reader reader = ServiceMediator.getReader();
			final ImagePlus imp = reader.open(a[0], false);
			if (imp == null) return null;
			return StampUtils.getTStamps(reader, imp);
		}
		if (name.equals("getLStamps")) {
			if (o == null) return null;
			final String[] a = (String[]) o;
			final Reader reader = ServiceMediator.getReader();
			final ImagePlus imp = reader.open(a[0], false);
			return StampUtils.getLStamps(reader, imp);
		}
		if (name.equals("getZStamps")) {
			if (o == null) return null;
			final String[] a = (String[]) o;
			final Reader reader = ServiceMediator.getReader();
			final ImagePlus imp = reader.open(a[0], false);
			if (imp == null) return null;
			return StampUtils.getZStamps(reader, imp);
		}
		if (name.equals("getEvents")) {
			if (o == null) return null;
			final String[] a = (String[]) o;
			final Reader reader = ServiceMediator.getReader();
			final ImagePlus imp = reader.open(a[0], false);
			if (imp == null) return null;
			return StampUtils.getEvents(reader, imp);
		}
		return null;
	}
}
